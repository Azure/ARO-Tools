$schema: pipeline.schema.v1
buildStep:
  args:
  - build
  command: make
resourceGroups:
- executionConstraints:
  - clouds:
    - ff
    - usnat
    environments:
    - int
    - stg
    singleton: true
  - clouds:
    - public
    environments:
    - prod
    regions:
    - uksouth
    singleton: false
  name: regional
  resourceGroup: hcp-underlay-uks
  steps:
  - action: Shell
    aksCluster: aro-hcp-aks
    command: make deploy
    dryRun: {}
    name: deploy
    shellIdentity:
      configRef: aroDevopsMsiId
    subnetName: subnet
    variables:
    - configRef: maestro_image
      name: MAESTRO_IMAGE
  - action: Shell
    command: make deploy
    dryRun:
      variables:
      - name: DRY_RUN
        value: A very dry one
      - name: FROM_EV2_REGION
        value: "3"
      - name: FROM_EV2_CORE
        value: vault.azure.net
    name: dry-run
    shellIdentity:
      configRef: aroDevopsMsiId
  - action: Shell
    command: make e2e
    dryRun:
      variables:
      - name: DRY_RUN
        value: A very dry one
    name: validation
    serviceValidation:
    - GA
    shellIdentity:
      configRef: aroDevopsMsiId
  - action: ARM
    deploymentLevel: ResourceGroup
    name: svc
    parameters: test.bicepparam
    template: templates/svc-cluster.bicep
    variables:
    - input:
        name: whatever
        resourceGroup: regional
        step: deploy
      name: MAESTRO_IMAGE
  - action: ARMStack
    actionOnUnmanage: delete
    deploymentLevel: ResourceGroup
    name: svc-stack
    parameters: test.bicepparam
    template: templates/svc-cluster.bicep
    variables:
    - input:
        name: whatever
        resourceGroup: regional
        step: deploy
      name: MAESTRO_IMAGE
  - action: DelegateChildZone
    childZone:
      configRef: childZone
    dependsOn:
    - resourceGroup: regional
      step: deploy
    name: cxChildZone
    parentZone:
      configRef: parentZone
  - action: SetCertificateIssuer
    applicationId:
      configRef: ev2.assistedId.applicationId
    dependsOn:
    - resourceGroup: regional
      step: deploy
    issuer:
      configRef: provider
    name: issuerTest
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    vaultBaseUrl:
      configRef: vaultBaseUrl
  - action: SetCertificateIssuer
    applicationId:
      configRef: ev2.assistedId.applicationId
    dependsOn:
    - resourceGroup: regional
      step: deploy
    issuer:
      value: provider
    name: issuerTestOutputChaining
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    vaultBaseUrl:
      input:
        name: kvUrl
        resourceGroup: regional
        step: deploy
  - action: CreateCertificate
    applicationId:
      configRef: ev2.assistedId.applicationId
    certificateName:
      value: hcp-mdsd
    contentType:
      value: x-pem-file
    issuer:
      value: OneCertV2-PrivateCA
    name: cert
    san:
      value: hcp-mdsd.geneva.keyvault.aro-int.azure.com
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    vaultBaseUrl:
      value: https://arohcp-svc-ln.vault.azure.net
  - action: ResourceProviderRegistration
    name: rpRegistration
    resourceProviderNamespaces:
      value:
      - Microsoft.Storage
      - Microsoft.EventHub
      - Microsoft.Insights
  - accountName:
      configRef: geneva.logs.rp.accountName
    action: RPLogsAccount
    adminAlias:
      configRef: geneva.logs.administrators.alias
    adminGroup:
      configRef: geneva.logs.administrators.securityGroup
    certdescription:
      value: HCP Service Cluster
    certsan:
      value: san
    configVersion:
      value: version
    database: {}
    environment:
      configRef: geneva.logs.environment
    events:
      akskubesystem: kubesystem
    metricsAccount:
      configRef: geneva.metrics.rp.account
    monikerDefaultRegion: {}
    name: rpAccount
    namespace:
      value: ns
    rolloutKind: FluentBit
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    subscriptionId:
      value: sub
    typeName:
      configRef: geneva.logs.typeName
  - accountName:
      configRef: geneva.logs.cluster.accountName
    action: ClusterLogsAccount
    adminAlias:
      configRef: geneva.logs.administrators.alias
    adminGroup:
      configRef: geneva.logs.administrators.securityGroup
    certdescription:
      value: HCP Management Cluster
    certsan:
      value: san
    configVersion:
      value: version
    database: {}
    environment:
      configRef: geneva.logs.environment
    events:
      akskubesystem: kubesystem
    metricsAccount:
      configRef: geneva.metrics.cluster.account
    monikerDefaultRegion: {}
    name: clusterAccount
    namespace:
      value: ns
    rolloutKind: FluentBit
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    subscriptionId:
      value: sub
    typeName:
      configRef: geneva.logs.typeName
  - accountName:
      configRef: geneva.logs.cluster.accountName
    action: RPLogsAccount
    adminAlias:
      configRef: geneva.logs.administrators.alias
    adminGroup:
      configRef: geneva.logs.administrators.securityGroup
    certdescription: {}
    certsan: {}
    configVersion: {}
    database:
      value: database
    environment:
      configRef: geneva.logs.environment
    metricsAccount:
      configRef: geneva.metrics.cluster.account
    monikerDefaultRegion:
      value: region
    name: rpAccountSetup
    namespace:
      value: ns
    rolloutKind: AccountSetup
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    subscriptionId:
      value: sub
    typeName: {}
  - action: ImageMirror
    digest:
      value: digest
    imageFilePath: {}
    imageMetadataFileName: {}
    imageTarFileName: {}
    name: image-mirror
    pullSecretKeyVault:
      value: pullSecretKeyVault
    pullSecretName:
      value: pullSecretName
    repository:
      value: repository
    shellIdentity:
      value: shellIdentity
    sourceRegistry:
      value: sourceRegistry
    targetACR:
      value: targetACR
  subscription: hcp-int-svc-uksouth
  subscriptionProvisioning:
    airsRegisteredUserPrincipalId:
      configRef: svc.subscription.airsRegisteredUserPrincipalId
    certificateDomains:
      configRef: svc.subscription.certificateDomains
    displayName:
      configRef: svc.subscription.displayName
    roleAssignment: test.bicepparam
- name: global
  resourceGroup: global
  steps:
  - action: ProviderFeatureRegistration
    identityFrom:
      name: whatever
      resourceGroup: regional
      step: deploy
    name: register-providers-afec-flags
    providerConfigRef: svc.subscription.displayName
  - action: FeatureRegistration
    name: register-providers-feature-flags
    providerConfigRef: svc.subscription.displayName
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
  - action: Ev2Registration
    identityFrom:
      name: whatever
      resourceGroup: regional
      step: deploy
    name: register-ev2-services
  - action: SecretSync
    configurationFile: data/encryptedsecrets/config.yaml
    encryptionKey: secretSyncKey
    identityFrom:
      name: whatever
      resourceGroup: regional
      step: deploy
    keyVault: arohcpint-global
    name: sync-secrets
  - action: ImageMirror
    digest:
      value: digest
    imageFilePath: {}
    imageMetadataFileName: {}
    imageTarFileName: {}
    name: image-mirror
    pullSecretKeyVault:
      value: pullSecretKeyVault
    pullSecretName:
      value: pullSecretName
    repository:
      value: repository
    shellIdentity:
      value: shellIdentity
    sourceRegistry:
      value: sourceRegistry
    targetACR:
      value: targetACR
  - action: ImageMirror
    copyFrom: oci-layout
    digest: {}
    imageFilePath:
      value: path/to/image-tar-file
    imageMetadataFileName:
      value: image-metadata-file-name
    imageTarFileName:
      value: image-tar-file-name
    name: image-mirror-oci-layout
    pullSecretKeyVault: {}
    pullSecretName: {}
    repository:
      value: repository
    shellIdentity:
      value: shellIdentity
    sourceRegistry: {}
    targetACR:
      value: targetACR
  - action: Pav2
    name: pav2
    secretKeyVault:
      configRef: ev2.assistedId.certificate.keyVault
    secretName:
      configRef: ev2.assistedId.certificate.name
    smeAppidParameter:
      input:
        name: kvUrl
        resourceGroup: regional
        step: deploy
    smeEndpointSuffixParameter:
      configRef: storage.storageSuffix
    storageAccount:
      configRef: storage.accountName
  subscription: hcp-uksouth
  subscriptionProvisioning:
    displayName:
      configRef: svc.subscription.displayName
    roleAssignment: test.bicepparam
rolloutName: Test Rollout
serviceGroup: Microsoft.Azure.ARO.Test
