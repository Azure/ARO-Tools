$schema: pipeline.schema.v1
serviceGroup: Microsoft.Azure.ARO.Test
rolloutName: Test Rollout
buildStep:
  command: 'make'
  args:
    - build
resourceGroups:
- name: '{{ .regionRG  }}'
  subscription: '{{ .svc.subscription.key }}'
  subscriptionProvisioning:
    displayName:
      configRef: .svc.subscription.displayName
    airsRegisteredUserPrincipalId:
      configRef: .svc.subscription.airsRegisteredUserPrincipalId
    certificateDomains:
      configRef: .svc.subscription.certificateDomains
    roleAssignment: 'test.bicepparam'
  steps:
  - name: deploy
    action: Shell
    command: make deploy
    aksCluster: '{{ .aksName  }}'
    shellIdentity:
      configRef: aroDevopsMsiId
    variables:
    - name: MAESTRO_IMAGE
      configRef: maestro_image
  - name: dry-run
    action: Shell
    command: make deploy
    shellIdentity:
      configRef: aroDevopsMsiId
    dryRun:
      variables:
      - name: DRY_RUN
        value: "A very dry one"
      - name: FROM_EV2_REGION
        value: '{{ .availabilityZoneCount }}'
      - name: FROM_EV2_CORE
        value: '{{ .vaultDomainSuffix }}'
  - name: svc
    action: ARM
    template: templates/svc-cluster.bicep
    parameters: test.bicepparam
    deploymentLevel: ResourceGroup
    variables:
      - name: MAESTRO_IMAGE
        input:
          step: deploy
          name: whatever
  - name: cxChildZone
    action: DelegateChildZone
    parentZone:
      configRef: parentZone
    childZone:
      configRef: childZone
    dependsOn:
    - deploy
  - name: issuerTest
    action: SetCertificateIssuer
    secretId:
      configRef: ev2.assistedId.certificate
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      configRef: vaultBaseUrl
    issuer:
      configRef: provider
    dependsOn:
    - deploy
  - name: issuerTestOutputChaining
    action: SetCertificateIssuer
    secretId:
      configRef: ev2.assistedId.certificate
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      input:
        name: kvUrl
        step: deploy
    issuer:
      value: provider
    dependsOn:
    - deploy
  - name: cert
    action: CreateCertificate
    secretId:
      configRef: ev2.assistedId.certificate
    applicationId:
      configRef: ev2.assistedId.applicationId
    vaultBaseUrl:
      value: https://arohcp-svc-ln.vault.azure.net
    certificateName:
      value: hcp-mdsd
    contentType:
      value: x-pem-file # GCS certificate file in PEM format
    san:
      value: hcp-mdsd.geneva.keyvault.aro-int.azure.com
    issuer:
      value: OneCertV2-PrivateCA
  - name: rpRegistration
    action: ResourceProviderRegistration
    resourceProviderNamespaces:
      value:
      - Microsoft.Storage
      - Microsoft.EventHub
      - Microsoft.Insights
  - name: rpAccount
    action: RPLogsAccount
    typeName:
      configRef: geneva.logs.typeName
    secretId:
      configRef: geneva.logs.rp.accountCert
    environment:
      configRef: geneva.logs.environment
    accountName:
      configRef: geneva.logs.rp.accountName
    metricsAccount:
      configRef: geneva.metrics.rp.account
    adminAlias:
      configRef: geneva.logs.administrators.alias
    adminGroup:
      configRef: geneva.logs.administrators.securityGroup
    subscriptionId:
      value: sub
    namespace:
      value: ns
    certsan:
      value: san
    certdescription:
      value: HCP Service Cluster
    configVersion:
      value: version
    events:
      akskubesystem: kubesystem
  - name: clusterAccount
    action: ClusterLogsAccount
    typeName:
      configRef: geneva.logs.typeName
    secretId:
      configRef: geneva.logs.cluster.accountCert
    environment:
      configRef: geneva.logs.environment
    accountName:
      configRef: geneva.logs.cluster.accountName
    metricsAccount:
      configRef: geneva.metrics.cluster.account
    adminAlias:
      configRef: geneva.logs.administrators.alias
    adminGroup:
      configRef: geneva.logs.administrators.securityGroup
    subscriptionId:
      value: sub
    namespace:
      value: ns
    certsan:
      value: san
    certdescription:
      value: HCP Management Cluster
    configVersion:
      value: version
    events:
      akskubesystem: kubesystem
  - name: image-mirror
    action: ImageMirror
    targetACR:
      value: targetACR
    sourceRegistry:
      value: sourceRegistry
    repository:
      value: repository
    digest:
      value: digest
    pullSecretKeyVault:
      value: pullSecretKeyVault
    pullSecretName:
      value: pullSecretName
    shellIdentity:
      value: shellIdentity
- name: '{{ .globalRG  }}'
  subscription: '{{ .managementClusterSubscription }}'
  subscriptionProvisioning:
    displayName:
      configRef: .svc.subscription.displayName
    roleAssignment: 'test.bicepparam'
  steps:
    - name: image-mirror-ii
      action: ImageMirror
      targetACR:
        value: targetACR
      sourceRegistry:
        value: sourceRegistry
      repository:
        value: repository
      digest:
        value: digest
      pullSecretKeyVault:
        value: pullSecretKeyVault
      pullSecretName:
        value: pullSecretName
      shellIdentity:
        value: shellIdentity